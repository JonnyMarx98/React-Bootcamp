{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\speed\\\\Documents\\\\React-Bootcamp\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < nrows; i++) {\n        board.push([]);\n\n        for (var j = 0; j < ncols; j++) {\n          board[i].push(Math.random() < this.props.chanceLightStartsOn ? true : false);\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props2 = this.props,\n          ncols = _this$props2.ncols,\n          nrows = _this$props2.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      console.log(y, x);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      for (var row = 0; row < nrows; row++) {\n        for (var col = 0; col < ncols; col++) {\n          // flip top and bottom neighbors\n          if (row === y + 1 || row === y - 1) {\n            if (col === x) flipCell(row, col);\n          } // flip left and right\n\n\n          if (col === x + 1 || col === x - 1) {\n            if (row === y) flipCell(row, col);\n          } // if([row,col] === up ||\n          //   [row,col] === down ||\n          //   [row,col] === right ||\n          //   [row,col] === left){\n          //     flipCell(row,col);\n          //     console.log(\"flipped\");\n          //   }\n\n        }\n      } // flip cell that was clicked\n\n\n      flipCell(y, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board\n      }); // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.board.map(function (row, r) {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, row.map(function (col, c) {\n          return React.createElement(Cell, {\n            key: \"\".concat(r, \"-\").concat(c),\n            coord: \"\".concat(r, \"-\").concat(c),\n            isLit: col,\n            flipCellsAround: _this2.flipCellsAround,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          });\n        }));\n      })))) // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      ;\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.4\n};\nexport default Board;","map":{"version":3,"sources":["C:\\Users\\speed\\Documents\\React-Bootcamp\\react-lights-out-starter\\src\\Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","ncols","nrows","i","push","j","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","console","log","flipCell","row","col","setState","r","c","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: 0.4\n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    let {ncols, nrows} = this.props;\n    // TODO: create array-of-arrays of true/false values\n    for(var i = 0; i < nrows; i++){\n      board.push([]);\n      for(var j = 0; j < ncols; j++){\n        board[i].push(Math.random() < this.props.chanceLightStartsOn ? true : false);\n      }\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    console.log(y, x);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    for(var row=0; row < nrows; row++){\n      for(var col=0; col < ncols; col++){\n        // flip top and bottom neighbors\n        if((row === y+1) || row === (y-1)){\n          if(col === x) flipCell(row,col);\n        }\n        // flip left and right\n        if((col === x+1) || col === (x-1)){\n          if(row === y) flipCell(row,col);\n        }\n        // if([row,col] === up ||\n        //   [row,col] === down ||\n        //   [row,col] === right ||\n        //   [row,col] === left){\n        //     flipCell(row,col);\n        //     console.log(\"flipped\");\n        //   }\n      }\n    }\n    // flip cell that was clicked\n    flipCell(y,x);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    this.setState({board: board});\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return(\n      <div className=\"Board\">\n        <table className=\"Board\">\n          <tbody>\n            {this.state.board.map((row, r) => (\n              <tr>\n                {row.map((col, c) => (\n                  <Cell \n                  key={`${r}-${c}`} \n                  coord={`${r}-${c}`} \n                  isLit={col} \n                  flipCellsAround={this.flipCellsAround}/> \n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n    \n    // make table board\n    \n\n    // TODO\n    )\n    \n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}