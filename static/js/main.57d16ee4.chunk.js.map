{"version":3,"sources":["logo.svg","Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokecard","number","props","this","imgSrc","id","slice","className","name","src","alt","type","base_experience","Component","Pokedex","pokemon","map","p","exp","defaultProps","Pokegame","hand2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,4LCyB5BC,G,uLAbP,IAJUC,EAIJC,EAAQC,KAAKD,MACfE,EAAM,UAPC,8DAOD,QALAH,EAK8BC,EAAMG,KALd,IAAM,YAAKJ,GAASK,OAAO,GAAGL,EAKpD,QACV,OACI,yBAAKM,UAAU,YACX,wBAAIA,UAAU,kBAAkBL,EAAMM,MACtC,yBAAKC,IAAKL,EAAQM,IAAKR,EAAMM,OAC7B,yBAAKD,UAAU,iBAAiBL,EAAMS,MACtC,yBAAKJ,UAAU,iBAAiBL,EAAMU,sB,GAT/BC,cCNjBC,G,uLAcE,OACI,yBAAKP,UAAU,WACX,wCACA,yBAAKA,UAAU,iBACVJ,KAAKD,MAAMa,QAAQC,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACAZ,GAAIY,EAAEZ,GACNG,KAAMS,EAAET,KACRG,KAAMM,EAAEN,KACRO,IAAKD,EAAEL,2B,GAvBTC,cAAhBC,EACKK,aAAe,CAClBJ,QAAU,CACN,CAACV,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQC,gBAAiB,IAC3D,CAACP,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASC,gBAAiB,IAC1D,CAACP,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOC,gBAAiB,IACxD,CAACP,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,KAC9D,CAACP,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYC,gBAAiB,KAC7D,CAACP,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,IAC9D,CAACP,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUC,gBAAiB,KAC1D,CAACP,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUC,gBAAiB,MAsBvDE,QChCTM,E,iLAcE,IACIC,EAAK,YAAQlB,KAAKD,MAAMa,SAM5B,OACI,6BACI,kBAAC,EAAD,CAASA,QATL,KAUJ,kBAAC,EAAD,CAASA,QAASM,S,GAxBXR,aAAjBO,EACKD,aAAe,CAClBJ,QAAU,CACN,CAACV,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQC,gBAAiB,IAC3D,CAACP,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASC,gBAAiB,IAC1D,CAACP,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOC,gBAAiB,IACxD,CAACP,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,KAC9D,CAACP,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYC,gBAAiB,KAC7D,CAACP,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,IAC9D,CAACP,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUC,gBAAiB,KAC1D,CAACP,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUC,gBAAiB,MAoBvDQ,QCrBAE,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCIcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.57d16ee4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Pokecard.css';\r\n\r\nconst POKE_API = \r\n'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/'\r\n\r\nconst POKE_API_2 = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/'\r\n\r\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3):number);\r\n\r\nclass Pokecard extends Component {\r\n    render() {\r\n        const props = this.props;\r\n        let imgSrc = `${POKE_API_2}${padToThree(props.id)}.png`\r\n        return (\r\n            <div className=\"Pokecard\">\r\n                <h1 className=\"Pokecard-title\">{props.name}</h1>\r\n                <img src={imgSrc} alt={props.name}></img>\r\n                <div className=\"Pokecard-data\">{props.type}</div>\r\n                <div className=\"Pokecard-data\">{props.base_experience}</div>\r\n            </div>\r\n        )\r\n    } \r\n}\r\n\r\nexport default Pokecard;","import React, { Component } from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css';\r\n\r\nclass Pokedex extends Component {\r\n    static defaultProps = {\r\n        pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"Pokedex\">\r\n                <h1>Pokedex!</h1>\r\n                <div className=\"Pokedex-cards\">\r\n                    {this.props.pokemon.map((p) => (\r\n                        <Pokecard \r\n                        id={p.id} \r\n                        name={p.name}\r\n                        type={p.type}\r\n                        exp={p.base_experience}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    } \r\n}\r\n\r\nexport default Pokedex;","import React, { Component } from 'react';\r\nimport Pokedex from './Pokedex';\r\n\r\n\r\nclass Pokegame extends Component {\r\n    static defaultProps = {\r\n        pokemon : [\r\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n          ]\r\n    }\r\n    render() {\r\n        let hand1 = [];\r\n        let hand2 = [ ...this.props.pokemon ];\r\n        // while(hand1.length < hand2.length){\r\n        //     let randIdx = Math.floor(Math.random() * hand2.length);\r\n        //     // take 1 random pokemon from hand 2 and put it in hand1\r\n        //     hand1.push(hand2.splice(randIdx,1)[0]);\r\n        // }\r\n        return (\r\n            <div>\r\n                <Pokedex pokemon={hand1}/>\r\n                <Pokedex pokemon={hand2}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}